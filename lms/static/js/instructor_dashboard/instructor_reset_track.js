// Generated by CoffeeScript 1.6.1
(function() {
  var PendingInstructorTasks,
    _this = this;

  PendingInstructorTasks = function() {
    return window.InstructorDashboard.util.PendingInstructorTasks;
  };

  this.InstructorResetTrack = (function() {

    function InstructorResetTrack($section) {
      var _this = this;
      this.$section = $section;
      this.username_filter_error = function(data) {
        return InstructorResetTrack.prototype.username_filter_error.apply(_this, arguments);
      };
      this.update_table = function(url) {
        return InstructorResetTrack.prototype.update_table.apply(_this, arguments);
      };
      this.$section.data('wrapper', this);
      this.$table = this.$section.find("#instructor-reset-track-table table");
      this.$next_table_button = this.$section.find("#instructor-reset-track-table .next-button");
      this.$prev_table_button = this.$section.find("#instructor-reset-track-table .prev-button");
      this.$table_pages = this.$section.find("#instructor-reset-track-table .table-pages");
      this.$apply_username_button = this.$section.find("#instructor-reset-track-table .apply-username-filter-button");
      this.$default_api_url = (this.$section.find("#instructor-reset-track-table .default-api-url")).attr("value");
      this.$apply_username_input = this.$section.find("#instructor-reset-track-table input[name='instructor-reset-track-username-filter']");
      this.$request_response_error = this.$section.find(".request-response-error");
      this.$apply_username_button.click(function() {
        var username;
        username = _this.$apply_username_input.attr("value");
        _this.$apply_username_button.attr("value", username);
        _this.update_table(_this.$default_api_url);
      });
      this.$next_table_button.click(function() {
        var url;
        url = _this.$next_table_button.attr("value");
        _this.update_table(url);
      });
      this.$prev_table_button.click(function() {
        var url;
        url = _this.$prev_table_button.attr("value");
        _this.update_table(url);
      });
      this.$next_table_button.click();
    }

    InstructorResetTrack.prototype.update_table = function(url) {
      var username,
        _this = this;
      username = this.$apply_username_button.attr("value");
      return $.ajax({
        type: 'GET',
        dataType: 'json',
        url: url,
        data: {
          username: username
        },
        success: function(data) {
          var current, maximum, pages, r, results, _i, _len;
          results = data['results'];
          _this.clear_table(_this.$table[0].rows.length - 1);
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            r = results[_i];
            _this.add_row(r);
          }
          _this.$next_table_button.attr("value", data['next']);
          _this.$prev_table_button.attr("value", data['previous']);
          if (!(_this.$next_table_button.attr("value"))) {
            _this.$next_table_button.addClass('disabled');
          } else {
            _this.$next_table_button.removeClass('disabled');
          }
          if (!(_this.$prev_table_button.attr("value"))) {
            _this.$prev_table_button.addClass('disabled');
          } else {
            _this.$prev_table_button.removeClass('disabled');
          }
          pages = _this.$table_pages[0];
          current = data['current_page'];
          maximum = data['num_pages'];
          pages.innerHTML = "" + current + "/" + maximum;
          _this.clear_error();
        },
        error: function(data) {
          return _this.username_filter_error(data);
        }
      });
    };

    InstructorResetTrack.prototype.username_filter_error = function(data) {
      var error_dict, error_message;
      error_dict = $.parseJSON(data.responseText);
      error_message = gettext("Unexpected error");
      if ("non_field_errors" in error_dict) {
        error_message = error_dict["non_field_errors"];
        this.$apply_username_input.attr("value", "");
        this.$apply_username_button.attr("value", "");
      }
      return this.$request_response_error.text(error_message);
    };

    InstructorResetTrack.prototype.clear_error = function() {
      return this.$request_response_error.text("");
    };

    InstructorResetTrack.prototype.add_row = function(row_dict) {
      var cell, new_row, url;
      new_row = this.$table[0].insertRow(this.$table[0].rows.length);
      cell = new_row.insertCell(0);
      cell.innerHTML = row_dict['instructor_username'];
      cell = new_row.insertCell(1);
      cell.innerHTML = row_dict['student_username'];
      cell = new_row.insertCell(2);
      url = row_dict['block_url'];
      cell.innerHTML = ("<a href='" + url + "'>") + row_dict['block_id'] + "</a>";
      cell = new_row.insertCell(3);
      cell.innerHTML = row_dict['action'];
      cell = new_row.insertCell(4);
      cell.innerHTML = row_dict['removed_answer'];
      cell = new_row.insertCell(5);
      cell.innerHTML = row_dict['time_readable'];
    };

    InstructorResetTrack.prototype.clear_table = function(number_rows) {
      var i, _i, _ref;
      if (number_rows <= 0) {
        return;
      }
      for (i = _i = 0, _ref = number_rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.$table[0].deleteRow(1);
      }
    };

    return InstructorResetTrack;

  })();

  _.defaults(window, {
    InstructorDashboard: {}
  });

  _.defaults(window.InstructorDashboard, {
    sections: {}
  });

  _.defaults(window.InstructorDashboard.sections, {
    InstructorResetTrack: InstructorResetTrack
  });

}).call(this);
